Creating a Context Manager :

When creating context managers using classes, user need to ensure that the class has the methods: __enter__() and __exit__().
The __enter__() returns the resource that needs to be managed and the __exit__() does not return anything but performs
the cleanup operations.
First, lets create a simple class called ContextManager to understand the basic structure of creating context managers
using classes, as shown below:

# Python program creating a
# context manager
  
class ContextManager():
    def __init__(self):
        print('init method called')
          
    def __enter__(self):
        print('enter method called')
        return self
      
    def __exit__(self, exc_type, exc_value, exc_traceback):
        print('exit method called')
  
  
with ContextManager() as manager:
    print('with statement block')
Output:

init method called
enter method called
with statement block
exit method called
In this case a ContextManager object is created. This is assigned to the variable after the as keyword i.e manager.
On running the above program, the following get executed in sequence:

__init__()
__enter__()
statement body (code inside the with block)
__exit__()[the parameters in this method are used to manage exceptions]
File management using context manager :

Let’s apply the above concept to create a class that helps in file resource management.The FileManager class helps in
opening a file, writing/reading contents and then closing it.

# Python program showing
# file management using 
# context manager
  
class FileManager():
    def __init__(self, filename, mode):
        self.filename = filename
        self.mode = mode
        self.file = None
          
    def __enter__(self):
        self.file = open(self.filename, self.mode)
        return self.file
      
    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.file.close()
  
# loading a file 
with FileManager('test.txt', 'w') as f:
    f.write('Test')
  
print(f.closed)
Output:



True
 
File management using context manager and with statement :

On executing the with block, the following operations happen in sequence:

A FileManager object is created with test.txt as the filename and w(write) as the mode when __init__ method is executed.
The __enter__ method opens the test.txt file in write mode(setup operation) and returns the FileManager object to variable f.
The text ‘Test’ is written into the file.
The __exit__ method takes care of closing the file on exiting the with block(teardown operation).
When print(f.closed) is run, the output is True as the FileManager has already taken care of closing the file which otherwise needed to be explicitly done.
Database connection management using context manager :

Let’s create a simple database connection management system. The number of database connections that can be opened at a time is also limited(just like file descriptors). Therefore context managers are helpful in managing connections to the database as there could be chances that the programmer may forget to close the connection.

# Python program shows the
# connection management 
# for MongoDB
  
from pymongo import MongoClient
  
class MongoDBConnectionManager():
    def __init__(self, hostname, port):
        self.hostname = hostname
        self.port = port
        self.connection = None
  
    def __enter__(self):
        self.connection = MongoClient(self.hostname, self.port)
        return self
  
    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.connection.close()
  
# connecting with a localhost
with MongoDBConnectionManager('localhost', '27017') as mongo:
    collection = mongo.connection.SampleDb.test
    data = collection.find({'_id': 1})
    print(data.get('name'))
 
Database connection management using context manager and with statement :

On executing the with block, the following operations happen in sequence:

A MongoDBConnectionManager object is created with localhost as the hostnamename and 27017 as the port when __init__ method is executed.
The __enter__ method opens the mongodb connection and returns the MongoDBConnectionManager object to variable mongo.
The test collection in SampleDb database is accessed and the document with _id=1 is retrieved. The name field of the document is printed.
The __exit__ method takes care of closing the connection on exiting the with block(teardown operation).
