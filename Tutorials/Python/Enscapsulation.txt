Encapsulation is one of the fundamental concepts in object-oriented programming (OOP).
It describes the idea of wrapping data and the methods that work on data within one unit.
This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data.
To prevent accidental change, an object’s variable can only be changed by an object’s method

In python we have concept of private and protected member to achieve encapsulation.
Python simply use convention to make and a member private or protected

Protected members:
Protected members (in C++ and JAVA) are those members of the class that cannot be accessed outside the class but
can be accessed from within the class and its subclasses. To accomplish this in Python,
just follow the convention by prefixing the name of the member by a single underscore “_”.
As mentioned earlier this is just a convention to tell that a variable should be only accessed within its class and
subclass and python doesn't prevent accessing private members being accessed outside.

# Creating a base class
class Base:
    def __init__(self):
         
        # Protected member
        self._a = 2
 
# Creating a derived class   
class Derived(Base):
    def __init__(self):
         
        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling protected member of base class: ")
        print(self._a)
 
obj1 = Derived()
         
obj2 = Base()
print(obj2._a)

Output:
Calling protected member of base class: 
2
2
**************************************************************************************

Private Members:
Private members are similar to protected members, the difference is that the class members declared private should
neither be accessed outside the class nor by any subclass. In Python, there is no existence of Private instance
variables that cannot be accessed except inside a class.
To define a private member prefix the member name with double underscore “__”.
Again this is just convention to tell that this member is supposed to accessed only inside class.
We cannot access private members directly outside class but python provides a indirect way to achieve this.

class Base:
    def __init__(self):
        self.a = "GeeksforGeeks"
        self.__c = "GeeksforGeeks"

# Creating a derived class
class Derived(Base):
    def __init__(self):

        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling private member of base class: ")
        print(self.__c)
# Driver code

obj2 = Derived()

As we tried accessing private variable "__c" in base class, program will through below error:
Traceback (most recent call last):
Calling private member of base class: 
  File "C:/Python_Practice/test.py", line 17, in <module>
    obj2 = Derived()
  File "C:/Python_Practice/test.py", line 14, in __init__
    print(self.__c)
AttributeError: 'Derived' object has no attribute '_Derived__c'

Process finished with exit code 1

Below Program should work fine:
class Base:
    def __init__(self):
        self.a = "GeeksforGeeks"
        self.__c = "GeeksforGeeks"

# Creating a derived class
class Derived(Base):
    def __init__(self):

        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling private member of base class: ")
        print(self._Base__c)
# Driver code

obj2 = Derived()

Output:
Calling private member of base class: 
GeeksforGeeks

Thats it when we try accessing private member inside sub class or out side class,
 <object>._<class_name>__<variable_name> is the convention[Ex:  print(self._Base__c)]
